# PRINT_START Macro
# Make sure to replace Printer Settings > Custom G-code > Start G-cocde with the following (for PrusaSlicer/SuperSlicer):
# M104 S0 ; Stops PS/SS from sending temp waits separately
# M140 S0
# PRINT_START BED=[first_layer_bed_temperature] EXTRUDER={first_layer_temperature[initial_extruder]+extruder_temperature_offset[initial_extruder]} CHAMBER=[chamber_temperature]

#[gcode_macro PRINT_START]
#gcode:
#    {% set BED = params.BED|default(65)|float %}
#    {% set BED_TEMP = params.BED_TEMP|default(0)|float %}
#    {% set EXTRUDER = params.EXTRUDER|default(210)|float %}
#    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(0)|float %}
#
#    {% if (EXTRUDER_TEMP > 0) %}#
#	    {% set EXTRUDER = EXTRUDER_TEMP %}
#    {% endif %}
#
#    {% if (BED_TEMP > 0) %}
#	    {% set BED = BED_TEMP %}
#    {% endif %}
#
#    WAKEUP
#    {% set intro_x = printer.configfile.config["stepper_x"]["position_max"]|float * 0.66 %}
#    {% set min_x = printer.configfile.config["stepper_x"]["position_min"]|float * 0.1 %}
#    {% set min_y = printer.configfile.config["stepper_y"]["position_min"]|float %}
#
#    STATUS_BUSY
#    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=160        ; set extruder temp to 160 for QGL w/o oozing
#    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED}    ; set bed temp
#    #SET_FILAMENT_SENSOR SENSOR=filament_presence ENABLE=0
#    #UNDERGLOW_SET RED=255 GREEN=0 BLUE=0
#    M117 Start up...
#    SET_CASELIGHT_ON
#    G21          ; set to mm
#    M220 S100	 ; set print speed to 100%
#    M221 S100	 ; set flow rate to 100%
#    M107         ; disable fans
#    G90          ; absolute positioning
#    M117 Pre-print park
#    G28
#    G0 X150 Y10 Z120 F10000
#    M117 Preheating
#    STATUS_HEATING
#    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED}         ; wait for bed temp         
#    STATUS_READY
#    M117 Homing & QGL
#    G32                                                      ; home
#    
#    M117 Calibrate Z
#    CALIBRATE_Z
#
#    M117 Getting mesh
#    BED_MESH_CALIBRATE
#    #BED_MESH_PROFILE LOAD=default                            ; load default mesh
#    
#    STATUS_HEATING
#    SMART_PARK 
#    #G0 Z2.0 F4000.0                    ; move to minimum position
#    M117 Heating to {EXTRUDER}C
#    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER}
#    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={EXTRUDER}      ; wait for extruder temp
#    STATUS_PRINTING
#    M117 Purge Line
#    # G92 E0.0                                           ; reset extruder to 0
#    # G1 Z0.2 X{intro_x} E20 F1000.0                     ; intro line
#    # G92 E0.0                                           ; reset extruder to 0
#    M83          ; extruder to relative mode
#    G92 E0                                               ; Reset extruder
#    G1 Y{min_y} X{min_x} Z0.3 F5000 ; move to start position
#    G1 Y{min_y} X{intro_x} Z0.3 F1500.0 E15 ; draw first line
#    G1 Y{min_y + 0.3} X{intro_x} Z0.3 F5000       ; move over
#    G1 Y{min_y + 0.3} X{min_x / 2} Z0.3 F1500 E35      ; draw second line
#    G92 E0
#    M400                              ; clear buffer
#    #UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=10
#    M117 Printing
#    #SET_FILAMENT_SENSOR SENSOR=filament_presence ENABLE=1

#####################################################################
#   print_start macro
#####################################################################

## *** THINGS TO UNCOMMENT: ***
## Bed mesh (2 lines at 2 locations)
## Z_TILT_ADJUST if your printer is a Trident
## Quad gantry level if your printer is a V2
## Nevermore - if you have one

[gcode_macro PRINT_START]
gcode:
  # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("40")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  #Wake up Printer
  WAKEUP
  
  # Homes the printer, sets absolute positioning and updates the Stealthburner leds.
  STATUS_HOMING         # Sets SB-leds to homing-mode
  G28                   # Full home (XYZ)
  G90                   # Absolut position

  ##  Uncomment for bed mesh (1 of 2)
  BED_MESH_CLEAR       # Clears old saved bed mesh (if any)

  # Checks if the bed temp is higher than 90c - if so then trigger a heatsoak.
  {% if params.BED|int > 90 %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
    STATUS_HEATING                                      # Sets SB-leds to heating-mode
    M106 S255                                           # Turns on the PT-fan

    ##  Uncomment if you have a Nevermore.
    SET_PIN PIN=nevermore VALUE=1                      # Turns on the nevermore

    G1 X{x_wait} Y{y_wait} Z60 F9000                    # Goes to center of the bed
    M190 S{target_bed}                                  # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"  # Displays info
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for chamber to reach desired temp

  # If the bed temp is not over 90c, then it skips the heatsoak and just heats up to set temp with a 5min soak
  {% else %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
    STATUS_HEATING                                      # Sets SB-leds to heating-mode
    G1 X{x_wait} Y{y_wait} Z60 F9000                    # Goes to center of the bed
    M190 S{target_bed}                                  # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Soak for 5min"                # Displays info
    G4 P300000                                          # Waits 5 min for the bedtemp to stabilize
  {% endif %}

  # Heating nozzle to 150 degrees. This helps with getting a correct Z-home
  SET_DISPLAY_TEXT MSG="Hotend: 150c"          # Displays info
  M109 S150                                    # Heats the nozzle to 150c

  ##  Uncomment for Trident (Z_TILT_ADJUST)
  #SET_DISPLAY_TEXT MSG="Z-tilt adjust"     # Displays info
  #STATUS_LEVELING                          # Sets SB-leds to leveling-mode
  #Z_TILT_ADJUST                            # Levels the buildplate via z_tilt_adjust
  #G28 Z                                    # Homes Z again after z_tilt_adjust

  ##  Uncomment for V2 (Quad gantry level AKA QGL)
  SET_DISPLAY_TEXT MSG="QGL"      # Displays info
  STATUS_LEVELING                 # Sets SB-leds to leveling-mode
  quad_gantry_level               # Levels the buildplate via QGL
  G28 Z                           # Homes Z again after QGL

  ##  Uncomment for Klicky auto-z
  #CALIBRATE_Z                                 # Calibrates Z-offset with klicky
  #SET_DISPLAY_TEXT MSG="Z-offset"             # Displays info

  ##  Uncomment for bed mesh (2 of 2)
  SET_DISPLAY_TEXT MSG="Bed mesh"    # Displays info
  STATUS_MESHING                     # Sets SB-leds to bed mesh-mode
  bed_mesh_calibrate                 # Starts bed mesh

  # Heats up the nozzle up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"             # Displays info
  STATUS_HEATING                                                # Sets SB-leds to heating-mode
  #G1 X{x_wait} Y{y_wait} Z15 F9000                              # Goes to center of the bed
  SMART_PARK
  M107                                                          # Turns off partcooling fan
  M109 S{target_extruder}                                       # Heats the nozzle to printing temp

  # Gets ready to print by doing a purge line and updating the SB-leds
  SET_DISPLAY_TEXT MSG="Printer goes brr"          # Displays info
  STATUS_PRINTING                                  # Sets SB-leds to printing-mode
  LINE_PURGE
  #G0 X{x_wait - 50} Y4 F10000                      # Moves to starting point
  #G0 Z0.4                                          # Raises Z to 0.4
  #G91                                              # Incremental positioning 
  #G1 X100 E20 F1000                                # Purge line
  #G90                                              # Absolut position

[gcode_macro PRINT_END]
#
# PRINT_END
#
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
#
description: End print and tidy up (retract filament, move toolhead, turn off heaters)
gcode:
    STATUS_BUSY
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F3600                ; retract filament
    G91                            ; relative positioning

    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

    #   Check end position to determine safe direction to move
    {% if printer.toolhead.position.x < (max_x - 20) %}
        {% set x_safe = 20.0 %}
    {% else %}
        {% set x_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 20) %}
        {% set y_safe = 20.0 %}
    {% else %}
        {% set y_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - 40) %}
        {% set z_safe = 40.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}

    G0 Z{z_safe} F3600             ; move nozzle up
    G0 X{x_safe} Y{y_safe} F20000  ; move nozzle to remove stringing
    TURN_OFF_HEATERS               
    M107                           ; turn off fan
    G90                            ; absolute positioning
    G0 X{max_x / 2} Y{max_y} F3600 ; park nozzle at rear
    M84                            ; disable steppers
    M117 Print Complete.

    {% if printer.configfile.config["bed_mesh"] %}
	BED_MESH_CLEAR
    {% endif %}

    SET_PIN PIN=nevermore VALUE=0


    #{% if printer['fan_generic exhaust_fan'] %}
    #STOP_TEMP_MONITOR
	#SET_FAN_SPEED FAN=exhaust_fan SPEED=1.0
	#UPDATE_DELAYED_GCODE ID=_DISABLE_EXHAUST DURATION=300
    #{% else %}
    #    M118 No exhaust fan configured
    #{% endif %}

    #{% if printer['fan_generic cooling_fan'] %}
	#SET_FAN_SPEED FAN=cooling_fan SPEED=1.0
	#UPDATE_DELAYED_GCODE ID=_DISABLE_COOLING DURATION=300
    #{% else %}
   #     M118 No cooling fan configured
    #{% endif %}

    STATUS_READY
    UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=60


[gcode_macro WAKEUP]
gcode:
  SET_CASELIGHT_ON
  STATUS_READY

#[delayed_gcode _SET_CASELIGHT_OFF]
#gcode:
#  SET_CASELIGHT_OFF

[gcode_macro SET_CASELIGHT_ON]
description: Turn on the caselight LEDs
gcode:
  SET_PIN PIN=caselight VALUE=1

[gcode_macro SET_CASELIGHT_OFF]
description: Turn off the caselight LEDs
gcode:
  SET_PIN PIN=caselight VALUE=0

[gcode_macro TOGGLE_CASELIGHT]
description: Switch caselight on/off
gcode:
	{% set status = printer['output_pin caselight'].value | float %}
	{% if status == 0 %}
		SET_CASELIGHT_ON
	{% else %}
		SET_CASELIGHT_OFF
	{% endif %}

[delayed_gcode _CLEAR_DISPLAY]
#
# _CLEAR_DISPLAY helper macro
# 
# Clear the last message from the printer display
#
# Usage: UPDATE_DELAYED_GCODE TARGET=_CLEAR_DISPLAY ID={time in seconds to wait before clearing display}
gcode:
  M117

# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

[gcode_macro TEST_SPEED]
gcode:
	# Speed
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	# Iterations
	{% set iterations = params.ITERATIONS|default(5)|int %}
	# Acceleration
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	# Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
	{% set bound = params.BOUND|default(20)|int %}
	# Size for small pattern box
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	# Large pattern
		# Max positions, inset by BOUND
		{% set x_min = printer.toolhead.axis_minimum.x + bound %}
		{% set x_max = printer.toolhead.axis_maximum.x - bound %}
		{% set y_min = printer.toolhead.axis_minimum.y + bound %}
		{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	# Small pattern at center
		# Find X/Y center point
		{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
		{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
		
		# Set small pattern box around center point
		{% set x_center_min = x_center - (smallpatternsize/2) %}
		{% set x_center_max = x_center + (smallpatternsize/2) %}
		{% set y_center_min = y_center - (smallpatternsize/2) %}
		{% set y_center_max = y_center + (smallpatternsize/2) %}

	# Save current gcode state (absolute/relative, etc)
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	# Output parameters to g-code terminal
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	# Home and get position for comparison later:
		G28
		# QGL if not already QGLd (only if QGL section exists in config)
		{% if printer.configfile.settings.quad_gantry_level %}
			{% if printer.quad_gantry_level.applied == False %}
				QUAD_GANTRY_LEVEL
				G28 Z
			{% endif %}
		{% endif %}	
		# Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
		G90
		G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
		G28 X Y
		G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
		G4 P1000 
		GET_POSITION

	# Go to starting position
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

	# Set new limits
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

	{% for i in range(iterations) %}
		# Large pattern
			# Diagonals
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_max} Y{y_max} F{speed*60}
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
			G0 X{x_min} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
			
			# Box
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_min} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
		
		# Small pattern
			# Small diagonals 
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_max} Y{y_center_max} F{speed*60}
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
			G0 X{x_center_min} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
			
			# Small box
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_min} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}

	# Restore max speed/accel/accel_to_decel to their configured values
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

	# Re-home and get position again for comparison:
		G28 X Y
		# Go to XY home positions (in case your homing override leaves it elsewhere)
		G90
		G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
		G4 P1000 
		GET_POSITION

	# Restore previous gcode state (absolute/relative, etc)
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[gcode_macro LOAD_FILAMENT]
gcode:
   M83                            ; set extruder to relative
   G1 E60 F300                    ; load
   G1 E15 F150                    ; prime nozzle with filament
   M82                            ; set extruder to absolute
    
[gcode_macro UNLOAD_FILAMENT]
gcode:
   M83                            ; set extruder to relative
   G1 E10 F300                    ; extrude a little to soften tip
   G1 E-60 F1800                  ; retract some, but not too much or it will jam
   M82                            ; set extruder to absolute